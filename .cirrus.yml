env:
  DEBIAN_FRONTEND: noninteractive
  LANG: C
  PGVERSION: 16

task:
  name: Linux (Debian/Ubuntu)
  matrix:
    - container:
        image: ubuntu:22.04
      trigger_type: manual
    - container:
        image: ubuntu:22.04
      env:
        configure_args: '-Dcares=enabled -Dpam=enabled -Dldap=enabled'
    - container:
        image: ubuntu:22.04
      env:
        configure_args: '-Devdns=false -Dopenssl=disabled'
    - container:
        image: ubuntu:22.04
      env:
        CFLAGS: -fno-sanitize-recover=all -fsanitize=undefined -fsanitize-address-use-after-scope -fno-sanitize=shift
      trigger_type: manual
    - container:
        image: ubuntu:22.04
      env:
        ENABLE_VALGRIND: yes
        CFLAGS: -O0 -g
        PGVERSION: 17
    - container:
        image: ubuntu:22.04
      env:
        use_scan_build: yes  # FIXME
      trigger_type: manual
    - arm_container:
        image: ubuntu:22.04
      trigger_type: manual
    - container:
        image: ubuntu:24.04
      trigger_type: manual
    - container:
        image: debian:bookworm
      env:
        PGVERSION: 15
      trigger_type: manual
    - container:
        image: debian:bullseye
      env:
        PGVERSION: 13
      trigger_type: manual
  setup_script:
    - apt-get update
    - apt-get -y --no-install-recommends install gnupg postgresql-common
    - /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y
    - apt-get update
    - pkgs="ca-certificates cpio gcc git iptables ldap-utils libc-ares-dev libevent-dev libldap-dev libpam0g-dev libssl-dev libsystemd-dev meson ninja-build pandoc pkg-config postgresql-$PGVERSION python3 python3-pip python3-venv slapd socat sudo"
    - case $CC in clang) pkgs="$pkgs clang";; esac
    - if [ x"$ENABLE_VALGRIND" = x"yes" ]; then pkgs="$pkgs valgrind"; fi
    - if [ x"$use_scan_build" = x"yes" ]; then pkgs="$pkgs clang-tools"; fi
    - apt-get -y --no-install-recommends install $pkgs
    - python3 -m venv /venv
    - /venv/bin/pip install -r requirements.txt
    - useradd user
    - chown -R user .
    - echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
  build_script:
    - su user -c ". /venv/bin/activate && meson setup build --prefix=$HOME/install -Dauto_features=disabled -Dcassert=true --werror -Dsystemd=enabled $configure_args"
    - su user -c "meson compile -C build -v"
  test_script:
    - su user -c "PATH=/usr/lib/postgresql/${PGVERSION}/bin:$PATH meson test -C build -v"
  install_script:
    - meson install -C build
#  dist_script:
#    - su user -c "make dist"
#    - PACKAGE_VERSION=$(sed -n 's/PACKAGE_VERSION = //p' config.mak)
#    - su user -c "tar -x -v -f pgbouncer-${PACKAGE_VERSION}.tar.gz"
#    - su user -c "cd pgbouncer-${PACKAGE_VERSION}/ && ./configure --prefix=$HOME/install2 --enable-werror --without-cares $configure_args && make -j4"
#    - cd pgbouncer-${PACKAGE_VERSION}/ && make -j4 install
#  tarball_artifacts:
#    path: "pgbouncer-*.tar.gz"
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"
      type: text/plain

task:
  name: Linux (Red Hat)
  trigger_type: manual
  matrix:
    - container:
        image: rockylinux:9
      env:
        configure_args: '-Dcares=enabled'
    - container:
        image: rockylinux:8
  setup_script:
    - dnf -y install 'dnf-command(config-manager)'
    - if grep -q -F 'release 9' /etc/redhat-release; then dnf config-manager --set-enabled "crb" --set-enabled "plus"; else dnf config-manager --set-enabled "powertools"; fi
    - dnf -y install diffutils file gcc iptables libevent-devel libpq-devel meson ninja-build openldap-clients openldap-devel openldap-servers openssl-devel pam-devel pkg-config postgresql-server postgresql-contrib python3 python3-pip socat sudo systemd-devel wget
    - case $configure_args in *cares=enabled*) dnf -y install c-ares-devel; esac
    - wget -O /tmp/pandoc.tar.gz https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-linux-amd64.tar.gz
    - tar xvzf /tmp/pandoc.tar.gz --strip-components 1 -C /usr/local/
    - if grep -q -F 'release 9' /etc/redhat-release; then dnf -y install python-unversioned-command; else dnf -y install python39 python39-pip && alternatives --set python /usr/bin/python3.9; fi
    - python -m pip install -r requirements.txt
    - useradd user
    - chown -R user .
    - echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
  build_script:
    - su user -c "meson setup build --prefix=$HOME/install -Dauto_features=disabled -Dcassert=true --werror -Dldap=enabled -Dpam=enabled -Dsystemd=enabled $configure_args"
    - su user -c "meson compile -C build"
  test_script:
    - su user -c "meson test -C build"
  install_script:
    - meson install -C build
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"
      type: text/plain

task:
  name: Linux (Alpine)
  trigger_type: manual
  container:
    matrix:
      - image: alpine:latest
  setup_script:
    - apk update
    - apk add build-base c-ares-dev iptables libevent-dev meson ninja openldap openldap-clients openldap-dev openssl openssl-dev pkgconf postgresql postgresql-contrib python3 py3-pip socat sudo wget
    - wget -O /tmp/pandoc.tar.gz https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-linux-amd64.tar.gz
    - tar xvzf /tmp/pandoc.tar.gz --strip-components 1 -C /usr/local/
    - python3 -m venv /venv
    - /venv/bin/pip install -r requirements.txt
    - adduser --disabled-password user
    - chown -R user .
    - echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
  build_script:
    - su user -c ". /venv/bin/activate && meson setup build --prefix=$HOME/install -Dauto_features=disabled -Dcassert=true --werror -Dcares=enabled -Dldap=enabled"
    - su user -c "meson compile -C build"
  test_script:
    - su user -c "meson test -C build"
  install_script:
    - meson install -C build
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"
      type: text/plain

task:
  name: FreeBSD
  freebsd_instance:
    image_family: freebsd-14-2
  env:
    HAVE_IPV6_LOCALHOST: yes
    USE_SUDO: true
  setup_script:
    - pkg install -y hs-pandoc libevent meson ninja openldap25-client openldap25-server pkgconf postgresql${PGVERSION}-server postgresql${PGVERSION}-contrib python devel/py-pip sudo
    - pip install -r requirements.txt
    - kldload pf
    - echo 'anchor "pgbouncer_test/*"' >> /etc/pf.conf
    - echo 'pf_enable="YES"' >> /etc/rc.conf
    - service pf start
    - pw useradd user
    - chown -R user .
    - echo 'user ALL=(ALL) NOPASSWD: ALL' >> /usr/local/etc/sudoers
  env:
    CPPFLAGS: -I/usr/local/include
    LDFLAGS: -L/usr/local/lib
  build_script:
    - su user -c "meson setup build --prefix=$HOME/install -Dauto_features=disabled --werror -Dldap=disabled"  # FIXME
    - su user -c "meson compile -C build"
  test_script:
    - su user -c "meson test -C build"
  install_script:
    - meson install -C build
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"

task:
  name: macOS
  macos_instance:
    image: ghcr.io/cirruslabs/macos-runner:sonoma
  env:
    HAVE_IPV6_LOCALHOST: yes
    USE_SUDO: true
    CPPFLAGS: -I/opt/homebrew/opt/openldap/include -I/opt/homebrew/opt/openssl@3/include
    LDFLAGS: -L/opt/homebrew/opt/openldap/lib -L/opt/homebrew/opt/openssl@3/lib
    PATH: /opt/homebrew/opt/postgresql@${PGVERSION}/bin:$PATH
    PKG_CONFIG_PATH: /opt/homebrew/opt/pkgconfig
  setup_script:
    - brew install libevent meson ninja openldap openssl pandoc pkg-config postgresql@${PGVERSION}
    - python3 -m venv venv
    - venv/bin/pip install -r requirements.txt
    - echo 'anchor "pgbouncer_test/*"' | sudo tee -a /etc/pf.conf
    - sudo pfctl -f /etc/pf.conf
  build_script:
    - . venv/bin/activate && meson setup build -Dauto_features=disabled --werror -Dldap=enabled
    - meson compile -C build
  test_script:
    - meson test -C build
  install_script:
    - meson install -C build
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"
      type: text/plain

task:
  name: Windows
  trigger_type: manual  # FIXME
  windows_container:
    image: cirrusci/windowsservercore:cmake
  env:
    PATH: C:/tools/msys64/usr/bin;%PATH%
    HOME: .
    HAVE_IPV6_LOCALHOST: yes
  matrix:
    - env:
        MSYSTEM: MINGW64
    # - env:
    #     MSYSTEM: MINGW32
  setup_script:
    - choco install -y --no-progress msys2
    - sh -l -c "pacman --noconfirm -S --needed base-devel ${MINGW_PACKAGE_PREFIX}-gcc ${MINGW_PACKAGE_PREFIX}-libevent ${MINGW_PACKAGE_PREFIX}-meson ${MINGW_PACKAGE_PREFIX}-openssl ${MINGW_PACKAGE_PREFIX}-postgresql pkg-config ${MINGW_PACKAGE_PREFIX}-python ${MINGW_PACKAGE_PREFIX}-python-pip zip"
    - sh -l -c 'pip install -r requirements.txt'
    - echo 127.0.0.1 localhost >> c:\Windows\System32\Drivers\etc\hosts
    - sh -l -c 'echo "127.0.0.1   localhost" >> /etc/hosts'
    - choco install -y --no-progress pandoc
  build_script:
    - sh -l -c "meson setup build -Dauto_features=disabled --werror"
    - sh -l -c "meson compile -C build"
  test_script:
    - sh -l -c "meson test -C build"
    - sh -l -c "windres build/pgbouncer.exe"
  install_script:
    - sh -l -c "meson install -C build"
#  dist_script:
#    - sh -l -c "make -j4 zip"
#  zip_artifacts:
#    path: "pgbouncer-*.zip"
  always:
    meson_log_artifacts:
      path: "build*/meson-logs/*.txt"
      type: text/plain

# FIXME
task:
  name: Formatting checks & linting
  container:
    image: ubuntu:22.04
  setup_script:
    - apt-get update
    - apt-get install -y --no-install-recommends python3 python3-pip cmake curl gcc g++ git make
    - pip install -r dev_requirements.txt
  build_script:
    - touch config.mak # Fake that configure has run
  test_script:
    - make format-check
    - make lint
